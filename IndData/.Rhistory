S_neg = sum(rej_signs<0)
fdp = (S_pos + 1) / max(S_neg, 1)
t = 6
rej = ifelse(abs(W)>= t, 1, 0)
rej_signs = rej*sign_W
S_pos = sum(rej_signs>0)
S_neg = sum(rej_signs<0)
fdp = (S_pos + 1) / max(S_neg, 1)
W
rej = ifelse(abs(W)>= t, 1, 0)
rej_signs = rej*sign_W
S_pos = sum(rej_signs>0)
S_neg = sum(rej_signs<0)
fdp = (S_neg + 1) / max(S_pos, 1)
t = 0.5
rej = ifelse(abs(W)>= t, 1, 0)
rej_signs = rej*sign_W
S_pos = sum(rej_signs>0)
S_neg = sum(rej_signs<0)
fdp = (S_neg + 1) / max(S_pos, 1)
t = 0.1
rej = ifelse(abs(W)>= t, 1, 0)
rej_signs = rej*sign_W
S_pos = sum(rej_signs>0)
S_neg = sum(rej_signs<0)
fdp = (S_neg + 1) / max(S_pos, 1)
t = 0.05
rej = ifelse(abs(W)>= t, 1, 0)
rej_signs = rej*sign_W
S_pos = sum(rej_signs>0)
S_neg = sum(rej_signs<0)
fdp = (S_neg + 1) / max(S_pos, 1)
print(W)
print(rej_signs)
theta_hat_permute <- clime(permute_X, lambda = 0.1)$Omegalist[[1]]
theta_hat - theta_hat_permute
print(W)
as.vector(beta_hat_d_permute * sqrt(diag(theta_hat)))
beta_temp_permute <- glmnet(permute_X, y, lambda = 1)$beta
# My debiased lasso
beta_hat_d = beta_temp + (1/n)*theta_hat %*% t(X) %*% (y - X %*% beta_temp)
beta_hat_d_permute = beta_temp_permute + (1/n)*theta_hat %*% t(X) %*% (y - permute_X %*% beta_temp_permute)
# Get W = Z - Z_tilde
W <- as.vector(beta_hat_d * sqrt(diag(theta_hat))) - as.vector(beta_hat_d_permute * sqrt(diag(theta_hat)))
print(W)
t = 1
rej = ifelse(abs(W)>= t, 1, 0)
rej_signs = rej*sign_W
S_pos = sum(rej_signs>0)
S_neg = sum(rej_signs<0)
fdp = (S_neg + 1) / max(S_pos, 1)
t = 0.5
rej = ifelse(abs(W)>= t, 1, 0)
rej_signs = rej*sign_W
S_pos = sum(rej_signs>0)
S_neg = sum(rej_signs<0)
fdp = (S_neg + 1) / max(S_pos, 1)
t = 0.1
rej = ifelse(abs(W)>= t, 1, 0)
rej_signs = rej*sign_W
S_pos = sum(rej_signs>0)
S_neg = sum(rej_signs<0)
fdp = (S_neg + 1) / max(S_pos, 1)
t = 0.4
rej = ifelse(abs(W)>= t, 1, 0)
rej_signs = rej*sign_W
S_pos = sum(rej_signs>0)
S_neg = sum(rej_signs<0)
fdp = (S_neg + 1) / max(S_pos, 1)
or (j in 1:1000){
t =4
rej = ifelse(abs(W)>= t, 1, 0)
rej_signs = rej*sign_W
S_pos = sum(rej_signs>0)
S_neg = sum(rej_signs<0)
fdp = (S_neg + 1) / max(S_pos, 1)
t = 3.5
rej = ifelse(abs(W)>= t, 1, 0)
rej_signs = rej*sign_W
S_pos = sum(rej_signs>0)
S_neg = sum(rej_signs<0)
fdp = (S_neg + 1) / max(S_pos, 1)
t = 0.001
rej = ifelse(abs(W)>= t, 1, 0)
rej_signs = rej*sign_W
S_pos = sum(rej_signs>0)
S_neg = sum(rej_signs<0)
fdp = (S_neg + 1) / max(S_pos, 1)
print(W)
View(beta_hat_d_permute)
new_x = cbind(X, permute_X)
## Get the theta_hat based on the precision matrix estimator
theta_hat <- clime(new_X, lambda = 0.1)$Omegalist[[1]]
new_X = cbind(X, permute_X)
## Get the theta_hat based on the precision matrix estimator
theta_hat <- clime(new_X, lambda = 0.1)$Omegalist[[1]]
# Basic lasso
beta_temp <- glmnet(new_X, y, lambda = 1)$beta
# My debiased lasso
beta_hat_d = beta_temp + (1/n)*theta_hat %*% t(X) %*% (y - X %*% beta_temp)
# My debiased lasso
beta_hat_d = beta_temp + (1/n)*theta_hat %*% t(new_X) %*% (y - new_X %*% beta_temp)
dim(beta_hat_d)
# Get W = Z - Z_tilde
W <- beta_hat_d[1:100] - beta_hat_d[101:200]
W
t = 1
rej = ifelse(abs(W)>= t, 1, 0)
rej_signs = rej*sign_W
S_pos = sum(rej_signs>0)
S_neg = sum(rej_signs<0)
fdp = (S_neg + 1) / max(S_pos, 1)
rej_signs
print(W)
print(W)
rej_signs
t = 1
rej = ifelse(abs(W)>= t, 1, 0)
sign_W = sign(W)
#print(W)
rej_signs = rej*sign_W
S_pos = sum(rej_signs>0)
S_neg = sum(rej_signs<0)
fdp = (S_neg + 1) / max(S_pos, 1)
t = 1.5
rej = ifelse(abs(W)>= t, 1, 0)
sign_W = sign(W)
#print(W)
rej_signs = rej*sign_W
S_pos = sum(rej_signs>0)
S_neg = sum(rej_signs<0)
fdp = (S_neg + 1) / max(S_pos, 1)
W <- as.vector(beta_hat_d * sqrt(diag(theta_hat)[1:100])) - as.vector(beta_hat_d_permute * sqrt(diag(theta_hat)[101:200]))
W <- as.vector(beta_hat_d[1:100] * sqrt(diag(theta_hat)[1:100])) - as.vector(beta_hat_d[101:200] * sqrt(diag(theta_hat)[101:200]))
W
rej = ifelse(abs(W)>= t, 1, 0)
sign_W = sign(W)
rej_signs = rej*sign_W
S_pos = sum(rej_signs>0)
S_neg = sum(rej_signs<0)
fdp = (S_neg + 1) / max(S_pos, 1)
get_knockout <- function(d, n){
Theta <- matrix(rep(0, d * d), nrow = d)
for (i in 1:d){
for (j in 1:d){
if (i == j){
Theta[i,j] <- 1
}
if (abs(i - j) == 1){
Theta[i,j] <- 0.3
}
}
}
Sigma <- solve(Theta)
X<- mvrnorm(n, mu= rep(0,d), Sigma)
beta<-rep(10,20)
## Initialize your beta_hat_d_1
beta_hat_d <- rep(NA, 100)
## Store your statistic
fdr <- rep(NA, 100)
power <- rep(NA, 100)
permute_X = X[sample(nrow(X)),]
new_X = cbind(X, permute_X)
## Get the theta_hat based on the precision matrix estimator
theta_hat <- clime(new_X, lambda = 0.1)$Omegalist[[1]]
## Write your iteration
for (i in 1:100){
## Fix X and repeat the procedure below for 100 times
eps <- rnorm(n)
y <- X[,1:20] %*% beta + eps
# Basic lasso
beta_temp <- glmnet(new_X, y, lambda = 1)$beta
# My debiased lasso
beta_hat_d = beta_temp + (1/n)*theta_hat %*% t(new_X) %*% (y - new_X %*% beta_temp)
# Get W = Z - Z_tilde
W <- as.vector(beta_hat_d[1:100] * sqrt(diag(theta_hat)[1:100])) - as.vector(beta_hat_d[101:200] * sqrt(diag(theta_hat)[101:200]))
sign_W = sign(W)
# Get FDP
alpha = 0.1
t = 0.1
for (j in 1:1000){
rej = ifelse(abs(W)>= t, 1, 0)
rej_signs = rej*sign_W
S_pos = sum(rej_signs>0)
S_neg = sum(rej_signs<0)
fdp = (S_neg + 1) / max(S_pos, 1)
if(fdp > alpha){
t <- t + 0.1
}
}
fdr[i] <- fdp
power[i] <- sum(ifelse(rej_signs<0,1,0)[1:20])/20
}
fdr_out = mean(fdr)
power_out = mean(power)
return(c(fdr_out, power_out))
}
get_knockoff <- function(d, n){
Theta <- matrix(rep(0, d * d), nrow = d)
for (i in 1:d){
for (j in 1:d){
if (i == j){
Theta[i,j] <- 1
}
if (abs(i - j) == 1){
Theta[i,j] <- 0.3
}
}
}
Sigma <- solve(Theta)
X<- mvrnorm(n, mu= rep(0,d), Sigma)
beta<-rep(10,20)
## Initialize your beta_hat_d_1
beta_hat_d <- rep(NA, 100)
## Store your statistic
fdr <- rep(NA, 100)
power <- rep(NA, 100)
permute_X = X[sample(nrow(X)),]
new_X = cbind(X, permute_X)
## Get the theta_hat based on the precision matrix estimator
theta_hat <- clime(new_X, lambda = 0.1)$Omegalist[[1]]
## Write your iteration
for (i in 1:100){
## Fix X and repeat the procedure below for 100 times
eps <- rnorm(n)
y <- X[,1:20] %*% beta + eps
# Basic lasso
beta_temp <- glmnet(new_X, y, lambda = 1)$beta
# My debiased lasso
beta_hat_d = beta_temp + (1/n)*theta_hat %*% t(new_X) %*% (y - new_X %*% beta_temp)
# Get W = Z - Z_tilde
W <- as.vector(beta_hat_d[1:100] * sqrt(diag(theta_hat)[1:100])) - as.vector(beta_hat_d[101:200] * sqrt(diag(theta_hat)[101:200]))
sign_W = sign(W)
# Get FDP
alpha = 0.1
t = 0.1
for (j in 1:1000){
rej = ifelse(abs(W)>= t, 1, 0)
rej_signs = rej*sign_W
S_pos = sum(rej_signs>0)
S_neg = sum(rej_signs<0)
fdp = (S_neg + 1) / max(S_pos, 1)
if(fdp > alpha){
t <- t + 0.1
}
}
fdr[i] <- fdp
power[i] <- sum(ifelse(rej_signs<0,1,0)[1:20])/20
}
fdr_out = mean(fdr)
power_out = mean(power)
return(c(fdr_out, power_out))
}
d <- 100
n = 300
k_300 <- get_knockoff(d,300)
k_500 <- get_knockoff(d, 500)
K = data.frame(N = c(300,500), FDR = c(k_300[1], k_500[1]), Power = c(k_300[2], k_500[2]))
print(K)
ifelse(rej_signs<0,1,0)[1:20]
rej_signs
log(0.4)/log(0.8)
log(0.4)/log(0.7)
log(0.4)/log(0.9)
log(0.4)/log(0.6)
pnorm(1.96)
dnorm(0.025)
qnorm(0.025)
qnorm(0.10)
(1.96 + 1.28)^2 * (2)^2
(1.96 + 1.28)^2 * (3)^2
qnorm(0.025)
qnorm(0.90)
(1.96 + 1.281552)^2 * (3)^2
qnorm(0.975)
2 * 1.54 / (0.15 + 0.1)
2 * 173 / (0.15 + 0.1)
2 * 174 / (0.15 + 0.1)
(1.96 + 1.281552)^2 * ((1.54+1)/(1.54-1))^2
(1.96 + 1.281552)^2 * ((1.54+1)/(1.54-1))^2
(1.96 - 1.281552)^2 * ((1.54+1)/(1.54-1))^2
(1.96 + 1.281552)^2 * ((2+1)/(2-1))^2
qnorm(0.975)
qnorm(1-(0.025/2))
(2.24 + 1.281552)^2 * ((2+1)/(2-1))^2
za = qnorm(0.975)
zb = qnorm(0.90)
d = 2
(za + zb)^2 * ((d+1)/(d-1))^2
d = 1.54
(za + zb)^2 * ((d+1)/(d-1))^2
log(0.85)/log(0.9)
delta= log(0.85)/log(0.9)
d = (za + zb)^2 * ((delta+1)/(delta-1))^2
2 * d / (0.15 + 0.1)
zb = qnorm(0.8)
delta= log(0.85)/log(0.9)
zb = qnorm(0.8)
d = (za + zb)^2 * ((delta+1)/(delta-1))^2
2 * d / (0.15 + 0.1)
za = qnorm(0.975)
zb = qnorm(0.8)
delta_g1= log(0.4)/log(0.8)
delta_g2= log(0.4)/log(0.7)
delta_g3= log(0.4)/log(0.9)
delta_g4= log(0.4)/log(0.6)
d_g1 = (za + zb)^2 * ((delta_g1+1)/(delta_g1-1))^2
d_g2 = (za + zb)^2 * ((delta_g2+1)/(delta_g2-1))^2
d_g3 = (za + zb)^2 * ((delta_g3+1)/(delta_g3-1))^2
d_g4 = (za + zb)^2 * ((delta_g4+1)/(delta_g4-1))^2
n_g1 = 2*d_g1 / (0.6 + 0.2)
n_g2 = 2*d_g2 / (0.6 + 0.2)
n_g3 = 2*d_g3 / (0.6 + 0.2)
n_g4 = 2*d_g4 / (0.6 + 0.2)
za = qnorm(0.975)
zb = qnorm(0.80)
delta = 2
(za + zb)^2 * ((delta+1)/(delta-1))^2
za = qnorm(0.975)
zb = qnorm(0.90)
delta = 2
(za + zb)^2 * ((delta+1)/(delta-1))^2
za = qnorm(0.975)
zb = qnorm(0.95)
delta = 2
(za + zb)^2 * ((delta+1)/(delta-1))^2
za = qnorm(0.975)
zb = qnorm(0.90)
delta = 2
(za + zb)^2 * ((delta+1)/(delta-1))^2
dat = data.frame(group = c("Arm 1", "Arm 2", "Arm 3", "Arm 4"), d = c(d_g1, d_g2, d_g3, d_g3), n = c(n_g1, n_g2, n_g3, n_g4)))
dat = data.frame(group = c("Arm 1", "Arm 2", "Arm 3", "Arm 4"), d = c(d_g1, d_g2, d_g3, d_g3), n = c(n_g1, n_g2, n_g3, n_g4))
print(dat)
za = qnorm(0.975)
zb = qnorm(0.8)
delta_g1= log(0.4)/log(0.8)
delta_g2= log(0.4)/log(0.7)
delta_g3= log(0.4)/log(0.9)
delta_g4= log(0.4)/log(0.6)
d_g1 = (za + zb)^2 * ((delta_g1+1)/(delta_g1-1))^2
d_g2 = (za + zb)^2 * ((delta_g2+1)/(delta_g2-1))^2
d_g3 = (za + zb)^2 * ((delta_g3+1)/(delta_g3-1))^2
d_g4 = (za + zb)^2 * ((delta_g4+1)/(delta_g4-1))^2
n_g1 = 2*d_g1 / (0.6 + 0.2)
n_g2 = 2*d_g2 / (0.6 + 0.2)
n_g3 = 2*d_g3 / (0.6 + 0.2)
n_g4 = 2*d_g4 / (0.6 + 0.2)
dat = data.frame(group = c("Arm 1", "Arm 2", "Arm 3", "Arm 4"), d = c(d_g1, d_g2, d_g3, d_g3), n = c(n_g1, n_g2, n_g3, n_g4))
print(dat)
library(here)
install.packages("here")
library(here)
here()
cwd()
wd()
set_here()
here()
dat <- data.frame(group = c("low", "high"), n = c(654, 662), mean = c(836, 825), sd = c(193, 193))
dat <- data.frame(group = c("low", "high"), var = c("weight", "weight") n = c(654, 662), mean = c(836, 825), sd = c(193, 193))
dat <- data.frame(group = c("low", "high"), var = c("weight", "weight"), n = c(654, 662), mean = c(836, 825), sd = c(193, 193))
t.test(weight ~ group, data = dat)
t.test(var ~ group, data = dat)
install.packages("BSDA")
library(BSDA)
tsum.test(836, 193, 654, 825, 193, 662)
(193^2*(653) + 193^2*(661)) / (654 + 662 – 1) #= 192.9267
(193^2*653 + 193^2*661) / (654 + 662 – 1) #= 192.9267
(193^2*653 + 193^2*661) / (654 + 662- 1) #= 192.9267
sqrt((193^2*653 + 193^2*661) / (654 + 662- 1)) #= 192.9267
(836 - 825)/(192.9267 * (1/654 + 1/662))
(836 - 825)/(192.9267 * sqrt((1/654 + 1/662))) = 19.7577
(836 - 825)/(192.9267 * sqrt((1/654 + 1/662))) #= 19.7577
qt(1.034)
qt(1.034, df = (654+662))
qt(1.034, df = 1316)
pt(1.034, df = 1316)
pt(-1.034, df = 1316) + (1 - pt(1.034, df = 1316))
(341 + 371) / (654 + 662)
(.521 - .56) / sqrt(.541(1-.541) * (1/654 + 1/662))
(0.521 - 0.56) / sqrt(0.541(1-0.541) * (1/654 + 1/662))
(0.521-0.56) / sqrt(0.541*(1-0.541) * (1/654 + 1/662))
pnorm(-1.419546)
pnorm(-1.419546)*2
?chisq
?chisq.test
662-371
chisq.test(dat)
dat = as.table(rbind(c(341, 371), c(313, 291)))
chisq.test(dat)
(341 + 371) / (654 + 662)
(0.521-0.56) / sqrt(0.541*(1-0.541) * (1/654 + 1/662))
pnorm(-1.419546)*2
(341 + 371) / (654 + 662)
(0.521-0.56) / sqrt(0.541*(1-0.541) * (1/654 + 1/662))
pnorm(-1.419546)*2
dat = as.table(rbind(c(341, 371), c(313, 291)))
chisq.test(dat)
(336 + 318 - 19 - 23)
336 + 318
336 + 318 - 605
(336 + 318 - 26 - 23)
(336 + 318 - 26 - 23)
19 + 62 + 22 + 68
rr = (171/605) / (198/616)
SE = 1.96 * sqrt(((605 - 171)/171)/605 + ((616-198)/198)/616)
log(rr) + SE
log(rr) - SE
rr - SE
rr + SE
rr = (171/605) / (198/616)R
rr = (171/605) / (198/616)
SE = 1.96 * sqrt(((605 - 171)/171)/605 + ((616-198)/198)/616)
rr + SE
rr - SE
rr = (171/605) / (198/616)
SE = 1.96 * sqrt(((605 - 171)/171)/605 + ((616-198)/198)/616)
rr
SE
rr + SE
rr - SE
SE = 1.96 * sqrt((605 - 171)/(171*605) + (616-198)/(198*616))
rr = (171/605) / (198/616)
SE = 1.96 * sqrt((605 - 171)/(171*605) + (616-198)/(198*616))
rr
SE
rr + SE
rr - SE
################################################################################
# Code: HH_processing
# Date: 1/4/2024
#
# Programmer: Emma Crenshaw
#
# Purpose:
#   This code imports the household-level data for the ARMS study
#   and combines data from different time points and data managers
#
# Input:
#   Raw data HH data files as .xlsx
#
# Output:
#   9 datasets combining each wave and individual data collector's .xlsx files
#     - main: contains the single-response-per-participant data
#     - absent_repeat: contains the data from the repeated section about absent members triggered by the response to "abs_member"
#     - animal_repeat: contains the data from the repeated section about domestic animals triggered by the response to "howmany_other_animal"
#     - crops_repeat: contains the data from the repeated section about crops triggered by the response to "crops"
#     - income_repeat: contains the data from the repeated section about income triggered by the response to "source_of_income"
#     - salary_repeat: contains the data from the repeated section about salaried income triggered by the response to "job"
#     - wage_repeat: contains the data from the repeated section about wage-derived income triggered by the response to "wage_labor"
#     - member_new_repeat: contains the data from the repeated section about new members triggered by the response to "new_member"
#     - member_left_repeat: contains the data from the repeated section about members that have left triggered by the response to "left_member"
#
#---------------------------------------------------------------------
# Notes:
#   - Each user will have to update their own working directory (where
#     their data is saved), as well as the location of the data dictionary
#     and each data file
#
#   - It is important to note the structure of the data: each excel document
#     has multiple sheets which must all be imported. Most of these have nonsense
#     names (begin_repeat_string of letters) and must be identified by the variables
#     they contain. These are caused by the 'repeat' sections in the survey and
#     thus may contain more than one response per participant. Additionally,
#     the same repeat section may be separated by month of data collection.
#     These repeat sections can be combined.
#
#   - It is vital that a correct and up to date data dictionary is used,
#     as that will define the variable types
#
#-----------------------------------------------------------------------
# Updates:
#   - 3/18/2024: Adding a variable for wave of data collection
################################################################################
# Import packages
library(tidyverse)
library(readxl)
library(stringr)
library(here)
# Load utilities
source(here("Code", "HH_utils.R"))
setwd("C://Users//emmcr//Documents//ARMS_Golden_Git//SW-Madagascar//HHData")
# Import packages
library(tidyverse)
library(readxl)
library(stringr)
library(readr)
library(here)
load("main.RData")
View(main)
###############
load("income_repeat.RData")
View(income_repeat)
load("income_repeat.RData")
load("absent_repeat.RData")
load("animal_repeat.RData")
load("crops_repeat.RData")
load("income_repeat.RData")
load("salary_repeat.RData")
load("wage_repeat.RData")
load("member_new_repeat.RData")
load("member_left_repeat.RData")
View(member_new_repeat)
View(crops_repeat)
View(income_repeat)
View(salary_repeat)
View(main)
View(income_repeat)
View(member_new_repeat)
View(member_left_repeat)
setwd("C://Users//emmcr//Documents//ARMS_Golden_Git//SW-Madagascar//IndData")
load("member.RData")
View(member)
